{"version":3,"sources":["components/Card/Card.jsx","store/actions/types.js","store/index.jsx","store/reducers/reducers.js","store/actions/index.js","store/actions/actions.js","components/Subreddits/SubredditItem.jsx","components/CardContainer.jsx","features/Header/MobileMenu.jsx","features/Header/Header.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Card","props","embed","title","author","score","selftext","url","media","alt","src","className","width","height","reddit_video","fallback_url","frameborder","autoplay","allowfullscreen","data-test","types","allReducers","combineReducers","menuClicked","state","action","type","payload","getPosts","getSubredditTitles","getPageTitle","middlewares","ReduxThunk","store","applyMiddleware","createStore","createStoreWithMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","REDDIT_ENDPOINT","fetchPosts","endpoint","dispatch","a","axios","get","then","res","data","children","catch","err","console","log","fetchSubredditTitles","menuClick","pageTitle","SubredditItem","clicked","useSelector","subredditTitle","onClick","connect","redditPosts","posts","subreddits","map","sub","index","configSubreddit","display_name_prefixed","length","post","configCard","MobileMenu","useDispatch","click","Header","homePage","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUA4CeA,EAzCF,SAACC,GAAW,IAQjBC,EANIC,EAA+CF,EAA/CE,MAAOC,EAAwCH,EAAxCG,OAAQC,EAAgCJ,EAAhCI,MAAOC,EAAyBL,EAAzBK,SAAUC,EAAeN,EAAfM,IAAKC,EAAUP,EAAVO,MAE7C,IAAIL,EACA,OAAO,KAKX,OAAQI,EAAI,IACR,IAAK,IACDL,EAAQ,qBAAKO,IAAKN,EAAOO,IAAKH,EAAKI,UAAU,UAC7C,MACJ,IAAK,IAEDT,EAAQ,wBAAQS,UAAU,QAAQC,MAAM,MAAMC,OAAO,MAAMH,IAAKF,EAAMM,aAAaC,aAAcC,YAAY,IAAIC,UAAQ,EAACC,iBAAe,IACzI,MACJ,QACIhB,EAAQ,KAIhB,OACI,sBAAKiB,YAAU,gBAAgBR,UAAU,iBAAzC,UACI,oBAAIQ,YAAU,iBAAiBR,UAAU,aAAzC,SAAuDR,IACtDG,GACD,mBAAGK,UAAU,YAAb,SAA0BL,IACzBC,GACDL,EACA,oBAAGiB,YAAU,gBAAb,qBAAsCf,EAAtC,YAAuDC,EAAvD,W,8BCjCCe,EACF,QADEA,EAEE,WAFFA,EAGa,qBAHbA,EAIO,iB,QCAPC,EAAcC,YAAgB,CACzCC,YCHgC,WAA4B,IAA3BC,EAA0B,wDAAXC,EAAW,uCAC3D,OAAQA,EAAOC,MACb,KAAKN,EACH,OAAOK,EAAOE,QAChB,QACE,OAAOH,IDDXI,SCc6B,WAAyB,IAAxBJ,EAAuB,uDAAf,GAAIC,EAAW,uCACrD,OAAOA,EAAOC,MACV,KAAKN,EACD,OAAOK,EAAOE,QAClB,QACI,OAAOH,IDlBfK,mBCsBuC,WAAyB,IAAxBL,EAAuB,uDAAf,GAAIC,EAAW,uCAC/D,OAAOA,EAAOC,MACV,KAAKN,EACD,OAAOK,EAAOE,QAClB,QACI,OAAOH,ID1BfM,aCGiC,WAAqC,IAApCN,EAAmC,uDAA3B,eAAgBC,EAAW,uCACrE,OAAQA,EAAOC,MACb,KAAKN,EACH,OAAOK,EAAOE,QACd,QACE,OAAOH,MDLFO,EAAc,CAACC,KAIfC,EAF4BC,IAAe,WAAf,EAAmBH,EAAnBG,CAAgCC,IAEpDC,CACjBf,EAAagB,OAAOC,8BAAgCD,OAAOE,wC,yCEAzDC,EAAkB,yBAEXC,EAAa,SAACC,GAAD,8CAAc,WAAOC,GAAP,SAAAC,EAAA,sEAC9BC,IAAMC,IAAN,UAAaN,GAAb,OAA+BE,IACpCK,MAAK,SAAAC,GACFL,EAAS,CACLjB,KAAMN,EACNO,QAASqB,EAAIC,KAAKA,KAAKC,cAG9BC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MAToB,2CAAd,uDAabG,EAAuB,yDAAM,WAAOZ,GAAP,SAAAC,EAAA,sEAChCC,IAAMC,IAAN,UAAaN,EAAb,qBACLO,MAAK,SAAAC,GACFL,EAAS,CACLjB,KAAMN,EACNO,QAASqB,EAAIC,KAAKA,KAAKC,cAG9BC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MATsB,2CAAN,uDC/BvBI,EAAY,SAAAjC,GACrB,MAAO,CACLG,KAAM,QACNC,SAAUJ,IAIHO,EAAe,SAAA2B,GAC1B,MAAO,CACL/B,KAAM,iBACNC,QAAS8B,ICsBEC,EAzBO,SAACzD,GAEnB,IAAM0D,EAAUC,aAAY,SAAApC,GAAK,OAAIA,EAAMD,eACnCsC,EAAwB5D,EAAxB4D,eAAgBtD,EAAQN,EAARM,IAExB,IAAKsD,EACD,OAAO,KAQX,OACI,qBAAK1C,YAAU,qBAAqBR,UAAU,4BAA4BmD,QAN9E,SAAgBpB,GACZT,EAAMU,SAASb,EAAavB,IAC5B0B,EAAMU,SAASF,EAAW,GAAD,OAAIlC,EAAJ,YAIzB,SACI,oBAAIY,YAAU,iBAAiBR,UAAWgD,EAAU,sBAAwB,kBAA5E,SAAiGE,OC0B7G,IAMeE,eANS,SAAAvC,GACpB,MAAO,CACLwC,YAAaxC,EAAMwC,eAIe,CAACT,wBAA1BQ,EAhDf,SAAwB9D,GACpB,IAAMgE,EAAQL,aAAY,SAAApC,GAAK,OAAIA,EAAMI,YAEnCsC,EAAaN,aAAY,SAAApC,GAAK,OAAIA,EAAMK,sBAE9C,OACI,sBAAKV,YAAU,yBAAyBR,UAAU,2BAAlD,UACI,qBAAKQ,YAAU,qBAAqBR,UAAU,sBAA9C,SACKuD,EAAWC,KAAI,SAACC,EAAKC,GACd,IAAMC,EAAkB,CACpBT,eAAgBO,EAAInB,KAAKsB,sBACzBhE,IAAK6D,EAAInB,KAAK1C,KAGlB,OACI,cAAC,EAAD,eAA+B+D,GAAXD,QAKnCJ,EAAMO,OAAS,GACZ,qBAAKrD,YAAU,iBAAiBR,UAAU,kBAA1C,SACCsD,EAAME,KAAI,SAACM,EAAMJ,GAAW,IAAD,EAC+BI,EAAKxB,KACtDyB,EAAa,CACnBvE,MAHwB,EAChBA,MAGRC,OAJwB,EACTA,OAIfC,MALwB,EACDA,MAKvBC,SANwB,EACMA,SAM9BC,IAPwB,EACgBA,IAOxCC,MARwB,EACqBA,OAS7C,OACA,cAAC,EAAD,eAAsBkE,GAAXL,cCnClBM,G,MAAa,SAAC1E,GAEvB,IAAMiE,EAAaN,aAAY,SAAApC,GAAK,OAAIA,EAAMK,sBACxC8B,EAAUC,aAAY,SAAApC,GAAK,OAAIA,EAAMD,eACrCoB,EAAWiC,cAEjB,OACI,oBAAIjE,UAAWV,EAAM4E,MAAQ,kBAAoB,WAAjD,SACKX,EAAWC,KAAI,SAACC,EAAKC,GACV,IAAMC,EAAkB,CACpBT,eAAgBO,EAAInB,KAAKsB,sBACzBhE,IAAK6D,EAAInB,KAAK1C,KAGlB,OACI,oBAAII,UAAU,WAAWmD,QAAS,kBAAMnB,EAASa,EAAUG,KAA3D,SACI,qBAAKhD,UAAU,YAAf,SACI,cAAC,EAAD,eAAiC2D,GAAbD,cCf3CS,EAAS,WAElB,IAAMC,EAAW,eACXpB,EAAUC,aAAY,SAAApC,GAAK,OAAIA,EAAMD,eACrCoB,EAAWiC,cAEXnB,EAAYG,aAAY,SAAApC,GAAK,OAAIA,EAAMM,gBAS7C,OACI,sBAAKX,YAAU,kBAAkBR,UAAU,mBAA3C,UACI,sBAAKA,UAAU,kBAAf,UACI,qBAAIA,UAAU,QAAQmD,QAVlC,WACSH,IACD1B,EAAMU,SAASb,EAAaiD,IAC5B9C,EAAMU,SAASF,EAAW,GAAD,OAAIsC,EAAJ,aAOrB,UAAuCtB,EAAU,uBAAM9C,UAAU,UAAhB,0BAAwC,mBAAGA,UAAU,8BACtG,qBAAKA,UAAU,YAAYmD,QAAS,kBAAMnB,EAASa,EAAUG,KAA7D,SACI,mBAAGhD,UAAWgD,EAAU,eAAiB,qBAIjD,cAAC,EAAD,CAAYxC,YAAU,aAAaR,UAAU,aAAakE,MAAOlB,EAASG,QAAS,kBAAMnB,EAASa,EAAUG,WCOxH,IAMeI,eANS,SAAAvC,GACtB,MAAO,CACLyC,MAAOzC,EAAMyC,SAIuB,CAACxB,cAA1BsB,EApCf,SAAa9D,GAoBX,OACE,sBAAKkB,YAAU,eAAeR,UAAU,MAAMqE,GAAG,MAAjD,UACE,cAAC,EAAD,IAEA,cAAC,EAAD,UCpBSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCEdjD,EAAMU,SAASY,KACftB,EAAMU,SAASF,EAAW,qBAE1BgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU1D,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ2D,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.68b24b5c.chunk.js","sourcesContent":["import \"./Card.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Card = (props) => {\r\n\r\n    const { title, author, score, selftext, url, media } = props;\r\n\r\n    if(!title) {\r\n        return null;\r\n    }\r\n\r\n    let embed;\r\n\r\n    switch (url[8]) {\r\n        case 'i':\r\n            embed = <img alt={title} src={url} className=\"image\" />;\r\n            break;\r\n        case 'v':\r\n            // eslint-disable-next-line jsx-a11y/iframe-has-title\r\n            embed = <iframe className=\"video\" width=\"560\" height=\"315\" src={media.reddit_video.fallback_url} frameborder=\"0\" autoplay allowfullscreen></iframe>;\r\n            break;\r\n        default:\r\n            embed = null;\r\n\r\n    }\r\n\r\n    return (\r\n        <div data-test=\"cardComponent\" className=\"card-component\">\r\n            <h3 data-test=\"componentTitle\" className=\"card-title\">{title}</h3>\r\n            {selftext && \r\n            <p className=\"text-body\">{selftext}</p>}\r\n            {url && \r\n            embed}\r\n            <p data-test=\"componentPost\">Author: {author}. Score: {score}.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nCard.propTypes = {\r\n    title: PropTypes.string,\r\n    post: PropTypes.string\r\n}\r\n\r\n\r\nexport default Card;","export const types = {\r\n    CLICK: 'CLICK',\r\n    GET_POSTS: 'getPosts',\r\n    GET_SUBREDDIT_TITLES: 'getSubredditTitles',\r\n    GET_PAGE_TITLE: 'GET_PAGE_TITLE',\r\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { menuClickedReducer, getPostsReducer, getSubredditTitlesReducer, getPageTitleReducer } from './reducers/reducers';\r\nimport ReduxThunk from 'redux-thunk';\r\n\r\nexport const allReducers = combineReducers({\r\n  menuClicked: menuClickedReducer,\r\n  getPosts: getPostsReducer,\r\n  getSubredditTitles: getSubredditTitlesReducer,\r\n  getPageTitle: getPageTitleReducer\r\n})\r\n\r\nexport const middlewares = [ReduxThunk];\r\n\r\nexport const createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\r\n\r\nexport const store = createStoreWithMiddleware(\r\n    allReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()\r\n  );","import { types } from '../actions/types';\r\n\r\nexport const menuClickedReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case types.CLICK:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getPageTitleReducer = (state = \"/r/ASX_bets/\", action) => {\r\n  switch (action.type) {\r\n    case types.GET_PAGE_TITLE:\r\n      return action.payload;\r\n      default:\r\n        return state;\r\n  }\r\n}\r\n  \r\nexport const getPostsReducer = (state = [], action) => {\r\n  switch(action.type){\r\n      case types.GET_POSTS:\r\n          return action.payload;\r\n      default:\r\n          return state;\r\n  }\r\n};\r\n\r\nexport const getSubredditTitlesReducer = (state = [], action) => {\r\n  switch(action.type){\r\n      case types.GET_SUBREDDIT_TITLES:\r\n          return action.payload;\r\n      default:\r\n          return state;\r\n  }\r\n};","import { types } from './types';\r\nimport axios from 'axios';\r\n\r\n// export const fetchPosts = () => async (dispatch) => {\r\n//     await axios.get('https://jsonplaceholder.typicode.com/posts?_limit=10')\r\n//     .then(res => {\r\n//         dispatch({\r\n//             type: types.GET_POSTS,\r\n//             payload: res.data\r\n//         })\r\n//     })\r\n//     .catch(err => {\r\n//         console.log(err);\r\n//     });\r\n// }\r\n\r\nconst REDDIT_ENDPOINT = \"https://www.reddit.com\";\r\n\r\nexport const fetchPosts = (endpoint) => async (dispatch) => {\r\n    await axios.get(`${REDDIT_ENDPOINT}${endpoint}`)\r\n    .then(res => {\r\n        dispatch({\r\n            type: types.GET_POSTS,\r\n            payload: res.data.data.children\r\n        })\r\n    })\r\n    .catch(err => {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nexport const fetchSubredditTitles = () => async (dispatch) => {\r\n    await axios.get(`${REDDIT_ENDPOINT}/subreddits.json`)\r\n    .then(res => {\r\n        dispatch({\r\n            type: types.GET_SUBREDDIT_TITLES,\r\n            payload: res.data.data.children\r\n        })\r\n    })\r\n    .catch(err => {\r\n        console.log(err)\r\n    })\r\n}\r\n","export const menuClick = menuClicked => {\r\n    return {\r\n      type: \"CLICK\",\r\n      payload: !menuClicked\r\n    };\r\n  };\r\n\r\nexport const getPageTitle = pageTitle => {\r\n  return {\r\n    type: \"GET_PAGE_TITLE\",\r\n    payload: pageTitle\r\n  }\r\n}","import './SubredditItem.css';\r\nimport PropTypes from 'prop-types';\r\nimport { store } from '../../store/index';\r\nimport { fetchPosts } from '../../store/actions';\r\nimport { getPageTitle } from '../../store/actions/actions';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst SubredditItem = (props) => {\r\n\r\n    const clicked = useSelector(state => state.menuClicked);\r\n    const { subredditTitle, url } = props;\r\n\r\n    if (!subredditTitle) {\r\n        return null;\r\n    }\r\n\r\n    function fetch (endpoint) {\r\n        store.dispatch(getPageTitle(url))\r\n        store.dispatch(fetchPosts(`${url}.json`))\r\n    }\r\n    \r\n    return (\r\n        <div data-test=\"subredditComponent\" className=\"subreddit-title-container\" onClick={fetch} >\r\n            <h4 data-test=\"subredditTitle\" className={clicked ? \"nav-subreddit-title\" : \"subreddit-title\" }>{subredditTitle}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nSubredditItem.propTypes = {\r\n    subredditTitle: PropTypes.string\r\n}\r\n\r\nexport default SubredditItem;","import Card  from \"./Card/Card\";\r\nimport \"./CardContainer.css\";\r\nimport { useSelector, connect } from 'react-redux';\r\nimport SubredditItem from \"./Subreddits/SubredditItem\";\r\nimport { fetchSubredditTitles } from '../store/actions'; \r\n\r\n\r\nfunction CardContainer (props) {\r\n    const posts = useSelector(state => state.getPosts)\r\n\r\n    const subreddits = useSelector(state => state.getSubredditTitles)\r\n\r\n    return (\r\n        <div data-test=\"cardContainerComponent\" className=\"card-container-component\">\r\n            <div data-test=\"subredditConatiner\" className=\"subreddit-container\" >\r\n                {subreddits.map((sub, index) => {\r\n                        const configSubreddit = {\r\n                            subredditTitle: sub.data.display_name_prefixed,\r\n                            url: sub.data.url\r\n                        };\r\n\r\n                        return (\r\n                            <SubredditItem key={index} {...configSubreddit} />\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n            {posts.length > 0 &&\r\n                <div data-test=\"cardsContainer\" className=\"cards-container\">\r\n                {posts.map((post, index) => {\r\n                    const { title, author, score, selftext, url, media } = post.data;\r\n                    const configCard = {\r\n                    title,\r\n                    author,\r\n                    score,\r\n                    selftext,\r\n                    url,\r\n                    media\r\n                    };\r\n                    return (\r\n                    <Card key={index} {...configCard}/>\r\n                    )\r\n                })}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      redditPosts: state.redditPosts\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, {fetchSubredditTitles})(CardContainer);","import \"./Header.css\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport SubredditItem from '../../components/Subreddits/SubredditItem';\r\nimport { menuClick } from '../../store/actions/actions';\r\n\r\nexport const MobileMenu = (props) => {\r\n\r\n    const subreddits = useSelector(state => state.getSubredditTitles);\r\n    const clicked = useSelector(state => state.menuClicked);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ul className={props.click ? \"nav-menu active\" : \"nav-menu\"}>\r\n            {subreddits.map((sub, index) => {\r\n                        const configSubreddit = {\r\n                            subredditTitle: sub.data.display_name_prefixed,\r\n                            url: sub.data.url\r\n                        };\r\n\r\n                        return (\r\n                            <li className=\"nav-item\" onClick={() => dispatch(menuClick(clicked))}>\r\n                                <div className=\"nav-links\" >\r\n                                    <SubredditItem key={index}   {...configSubreddit} />\r\n                                </div>\r\n                            </li>\r\n                            \r\n                        );\r\n                    })\r\n                }\r\n        </ul>\r\n    )\r\n}\r\n\r\n","import \"./Header.css\";\r\nimport { MobileMenu } from \"./MobileMenu\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getPageTitle, menuClick } from '../../store/actions/actions';\r\nimport { store } from '../../store/index';\r\nimport { fetchPosts } from \"../../store/actions\";\r\n\r\nexport const Header = () => {\r\n    // const width = window.screen.width;\r\n    const homePage = '/r/ASX_bets/';\r\n    const clicked = useSelector(state => state.menuClicked);\r\n    const dispatch = useDispatch();\r\n\r\n    const pageTitle = useSelector(state => state.getPageTitle)\r\n\r\n    function fetch () {\r\n        if (!clicked) {\r\n            store.dispatch(getPageTitle(homePage))\r\n            store.dispatch(fetchPosts(`${homePage}.json`));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div data-test=\"headerComponent\" className=\"header-container\">\r\n            <div className=\"title-container\" >\r\n                <h1 className=\"title\" onClick={fetch}>{pageTitle}<span className=\"browser\" > Viewer lite <i className='fab fa-reddit-alien' /></span></h1>\r\n                <div className=\"menu-icon\" onClick={() => dispatch(menuClick(clicked))}>\r\n                    <i className={clicked ? 'fas fa-times' : \"fas fa-bars\"} />\r\n                </div>\r\n            </div>\r\n            \r\n            <MobileMenu data-test=\"mobileMenu\" className=\"mobileMenu\" click={clicked} onClick={() => dispatch(menuClick(clicked))}/>\r\n            \r\n        </div>\r\n    )\r\n}","import './App.css';\r\nimport CardContainer from \"./components/CardContainer\";\r\nimport { Header } from './features/Header/Header';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from './store/actions'; \r\n// import { store } from './store';\r\n\r\n\r\nfunction App(props) {\r\n  \r\n  // **Usage for Sharedbutton has been disabled \r\n  // ** original function was to fetch posts upon button click\r\n  //function fetch() {\r\n  //   props.fetchPosts();\r\n  // }\r\n\r\n  // const configButton = {\r\n  //   buttonText: 'Press for posts',\r\n  //   emitEvent: fetch\r\n  // }\r\n\r\n  // {posts.length === 0 && \r\n  //   <SharedButton {...configButton} />\r\n  // }  \r\n\r\n  \r\n\r\n\r\n  return (\r\n    <div data-test='appComponent' className=\"App\" id=\"App\" >\r\n      <Header />\r\n      \r\n      <CardContainer />\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    posts: state.posts\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchPosts})(App);\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from './store/index';\r\nimport { fetchPosts, fetchSubredditTitles } from './store/actions';\r\n\r\nstore.dispatch(fetchSubredditTitles());\r\nstore.dispatch(fetchPosts('/r/ASX_bets.json'))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}